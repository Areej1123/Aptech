using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApp7
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button_encrypt_Click(object sender, EventArgs e)
        {
            // Encryption 
            string key = "LKJHUY&#6554trGF";
            string input = txt_plainText.Text;

            AesManaged SymAlgo = new AesManaged();
            SymAlgo.Key = UTF8Encoding.UTF8.GetBytes(key);
            SymAlgo.Padding = PaddingMode.PKCS7;
            SymAlgo.Mode = CipherMode.ECB;

            ICryptoTransform Ctranform = SymAlgo.CreateEncryptor();
            byte[] inputArray = UTF8Encoding.UTF8.GetBytes(input);
            byte[] resultArray = Ctranform.TransformFinalBlock(inputArray, 0, inputArray.Length);
            SymAlgo.Clear();

            txtEncryptedText.Text = Convert.ToBase64String(resultArray);

        }

        private void button_decrypt_Click(object sender, EventArgs e)
        {
            // Decryption
            try
            {
                string key = "LKJHUY&#6554trGF";
                string encryptedText = txtEncryptedText.Text;

                SymmetricAlgorithm SymAlgo = new AesManaged();
                SymAlgo.Key = UTF8Encoding.UTF8.GetBytes(key);
                SymAlgo.Padding = PaddingMode.PKCS7;
                SymAlgo.Mode = CipherMode.ECB;

                ICryptoTransform Ctranform = SymAlgo.CreateDecryptor();
                byte[] inputArray = Convert.FromBase64String(encryptedText);
                byte[] resultArray = Ctranform.TransformFinalBlock(inputArray, 0, inputArray.Length);
                SymAlgo.Clear();

                txtDecryptedText.Text = Encoding.UTF8.GetString(resultArray);
            }
            catch (Exception exe)
            {
                MessageBox.Show(exe.Message);
            }

        }
    }
}

-------------------------------- Hashing ------
public static string Hash(string password)
        {
            IBuffer buffer = CryptographicBuffer.ConvertStringToBinary(txt_name.Text, BinaryStringEncoding.Utf16BE);
            HashAlgorithmProvider hashAlgorithm = HashAlgorithmProvider.OpenAlgorithm(HashAlgorithmNames.Sha1);
            IBuffer hashBuffer = hashAlgorithm.HashData(buffer);
            txt_serialize.Text = CryptographicBuffer.EncodeToBase64String(hashBuffer);
        }